import { useState } from "react";
import { useNavigate } from "react-router-dom";
import { Feather } from "lucide-react";
import {
  PromptInput,
  PromptInputSubmit,
  PromptInputTextarea,
  PromptInputToolbar,
  PromptInputTools,
  PromptInputButton,
  PromptInputModelSelect,
  PromptInputModelSelectTrigger,
  PromptInputModelSelectContent,
  PromptInputModelSelectItem,
  PromptInputModelSelectValue,
} from '@/components/ai-elements/prompt-input';
import { Suggestion, Suggestions } from "@/components/ai-elements/suggestion";
import { useChatHistory } from "@/contexts/ChatHistoryContext";
import { Button } from "@/components/ui/button";
import { Card, CardContent } from "@/components/ui/card";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { User } from "lucide-react";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { useTheme } from "next-themes";
import { stackClientApp } from "@/stack";
import { LogOut, Settings, Sun, Moon, Plus, Mic, Globe } from "lucide-react";

const Homepage = () => {
  const [inputValue, setInputValue] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const [selectedModel, setSelectedModel] = useState("gpt-4");
  const navigate = useNavigate();
  const { theme, setTheme } = useTheme();
  const {
    createSessionWithMessage,
    isAuthenticated,
    user,
    authLoading,
  } = useChatHistory();

  const handleSubmit = async (e?: React.FormEvent<HTMLFormElement>) => {
    if (e) e.preventDefault();
    console.log('handleSubmit called with inputValue:', inputValue);
    
    if (!inputValue.trim() || isLoading) {
      console.log('Submit cancelled - no input or already loading');
      return;
    }

    const messageContent = inputValue.trim();
    setIsLoading(true);
    console.log('Starting conversation with message:', messageContent);

    try {
      // Create a new session and send the message in one go
      const sessionId = await createSessionWithMessage(messageContent, "New Conversation");
      console.log('Created session with message:', sessionId);
      
      // Small delay to ensure session and messages are fully processed
      await new Promise(resolve => setTimeout(resolve, 200));
      
      // Navigate to chat page with the session ID
      navigate(`/chat/${sessionId}`);
    } catch (error) {
      console.error("Error starting conversation:", error);
      setIsLoading(false);
      
      let errorMessage = "Failed to start conversation. Please try again.";
      if (error instanceof Error) {
        if (error.message.includes("Authentication required")) {
          errorMessage = "Please sign in to continue.";
          navigate("/sign-in");
          return;
        } else if (error.message.includes("API key")) {
          errorMessage = "OpenAI API key not configured. Please check your environment variables.";
        }
      }
      
      console.error(errorMessage);
    }
  };

  const handleSuggestionClick = async (suggestion: string) => {
    setInputValue(suggestion);
    
    // Auto-submit after setting the value
    if (isLoading) return;
    
    setIsLoading(true);

    try {
      // Create a new session and send the suggestion in one go
      const sessionId = await createSessionWithMessage(suggestion, "New Conversation");
      
      // Small delay to ensure session and messages are fully processed
      await new Promise(resolve => setTimeout(resolve, 200));
      
      // Navigate to chat page with the session ID
      navigate(`/chat/${sessionId}`);
    } catch (error) {
      console.error("Error starting conversation:", error);
      setIsLoading(false);
      
      let errorMessage = "Failed to start conversation. Please try again.";
      if (error instanceof Error) {
        if (error.message.includes("Authentication required")) {
          errorMessage = "Please sign in to continue.";
          navigate("/sign-in");
          return;
        } else if (error.message.includes("API key")) {
          errorMessage = "OpenAI API key not configured. Please check your environment variables.";
        }
      }
      
      console.error(errorMessage);
    }
  };

  if (authLoading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="animate-spin rounded-full h-32 w-32 border-b-2 border-primary"></div>
      </div>
    );
  }

  if (!isAuthenticated) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-background to-muted/20">
        <Card className="w-full max-w-md mx-4">
          <CardContent className="pt-6">
            <div className="text-center space-y-4">
              <h1 className="text-2xl font-light">Welcome to Scriptor Umbra</h1>
              <p className="text-muted-foreground">
                Please sign in to start using our AI writing assistant.
              </p>
              <Button
                onClick={() => navigate("/sign-in")}
                className="w-full"
              >
                Sign In
              </Button>
            </div>
          </CardContent>
        </Card>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-background via-background to-muted/20">
      {/* Header */}
      <header className="border-b bg-background/80 backdrop-blur-sm sticky top-0 z-50">
        <div className="container mx-auto px-4 py-3 flex items-center justify-between">
          <div 
            className="flex items-center space-x-3 cursor-pointer hover:opacity-80 transition-opacity"
            onClick={() => navigate("/")}
          >
            <div className="relative">
              <img 
                src="/logo.png" 
                alt="Scriptor Umbra Logo" 
                className="w-8 h-8 rounded-2xl object-cover"
              />
              <div className="absolute -top-1 -right-1 w-4 h-4 bg-green-500 rounded-full border-2 border-white dark:border-slate-950 animate-pulse" />
            </div>
            <div>
              <h1 className="text-xl font-light bg-gradient-to-r from-slate-900 via-blue-600 to-indigo-600 dark:from-white dark:via-blue-400 dark:to-indigo-400 bg-clip-text text-transparent">
                Scriptor Umbra
              </h1>
              <p className="text-xs text-slate-500 dark:text-slate-400">
                Ghostwriting Assistant
              </p>
            </div>
          </div>

          <div className="flex items-center space-x-3">
            <Button
              variant="ghost"
              size="icon"
              onClick={() => setTheme(theme === "dark" ? "light" : "dark")}
            >
              {theme === "dark" ? (
                <Sun className="h-4 w-4" />
              ) : (
                <Moon className="h-4 w-4" />
              )}
            </Button>

            <DropdownMenu>
              <DropdownMenuTrigger asChild>
                <Button variant="ghost" className="relative h-8 w-8 rounded-full">
                  <Avatar className="h-8 w-8">
                    <AvatarImage src={user?.profileImageUrl || ""} alt={user?.displayName || ""} />
                    <AvatarFallback>
                      {user?.displayName?.charAt(0)?.toUpperCase() || <User className="h-4 w-4" />}
                    </AvatarFallback>
                  </Avatar>
                </Button>
              </DropdownMenuTrigger>
              <DropdownMenuContent className="w-56" align="end">
                <DropdownMenuItem onClick={() => navigate("/settings")}>
                  <Settings className="mr-2 h-4 w-4" />
                  Settings
                </DropdownMenuItem>
                <DropdownMenuSeparator />
                <DropdownMenuItem
                  onClick={() => stackClientApp.signOut()}
                  className="text-red-600 focus:text-red-600"
                >
                  <LogOut className="mr-2 h-4 w-4" />
                  Sign out
                </DropdownMenuItem>
              </DropdownMenuContent>
            </DropdownMenu>
          </div>
        </div>
      </header>

      {/* Main Content */}
      <main className="container mx-auto px-4 py-12 max-w-4xl">
        <div className="text-center space-y-8">
          {/* Logo and Title */}
          <div className="space-y-4">
            <div className="relative mx-auto w-fit">
              <img 
                src="/logo.png" 
                alt="Scriptor Umbra Logo" 
                className="w-20 h-20 rounded-3xl object-cover shadow-lg"
              />
              <div className="absolute -top-1 -right-1 w-6 h-6 bg-green-500 rounded-full border-2 border-white dark:border-slate-950 animate-pulse" />
            </div>
            <div>
              <h1 className="text-4xl font-light mb-2 bg-gradient-to-r from-slate-900 via-blue-600 to-indigo-600 dark:from-white dark:via-blue-400 dark:to-indigo-400 bg-clip-text text-transparent">
                Welcome back, {user?.displayName?.split(' ')[0] || 'Writer'}
              </h1>
              <p className="text-xl text-muted-foreground">
                What would you like to create today?
              </p>
            </div>
          </div>

          {/* Suggested Prompts */}
          <div className="space-y-4">
            <h2 className="text-lg font-light text-left">Try these prompts</h2>
            <Suggestions className="grid grid-cols-1 md:grid-cols-2 gap-3">
              <Suggestion 
                suggestion="Write a poem in the style of Sylvia Plath"
                onClick={handleSuggestionClick}
                className="text-left p-4 border rounded-lg hover:bg-muted/50 transition-colors cursor-pointer"
              >
                <span className="font-light">Write a poem in the style of Sylvia Plath</span>
              </Suggestion>

              <Suggestion 
                suggestion="Summarize a scene as if Hemingway wrote it"
                onClick={handleSuggestionClick}
                className="text-left p-4 border rounded-lg hover:bg-muted/50 transition-colors cursor-pointer"
              >
                <span className="font-light">Summarize a scene as if Hemingway wrote it</span>
              </Suggestion>

              <Suggestion 
                suggestion="Help me write the first few pages of my children's book"
                onClick={handleSuggestionClick}
                className="text-left p-4 border rounded-lg hover:bg-muted/50 transition-colors cursor-pointer"
              >
                <span className="font-light">Help me write the first few pages of my children's book</span>
              </Suggestion>

              <Suggestion 
                suggestion="Create an image of a magical forest character"
                onClick={handleSuggestionClick}
                className="text-left p-4 border rounded-lg hover:bg-muted/50 transition-colors cursor-pointer"
              >
                <span className="font-light">Create an image of a magical forest character</span>
              </Suggestion>
            </Suggestions>
          </div>

          {/* Prompt Input */}
          <div className="space-y-4">
            <PromptInput 
              onSubmit={handleSubmit} 
              className="relative"
            >
              <PromptInputTextarea
                onChange={(e) => setInputValue(e.target.value)}
                value={inputValue}
                placeholder="Start writing your next masterpiece..."
                className="min-h-[60px] text-sm font-light resize-none"
              />
              <PromptInputToolbar>
                <PromptInputTools>
                  <PromptInputButton>
                    <Plus className="w-4 h-4" />
                  </PromptInputButton>
                  <PromptInputButton>
                    <Mic className="w-4 h-4" />
                  </PromptInputButton>
                  <PromptInputButton>
                    <Globe className="w-4 h-4" />
                    Search
                  </PromptInputButton>
                  <PromptInputModelSelect value={selectedModel} onValueChange={setSelectedModel}>
                    <PromptInputModelSelectTrigger>
                      <PromptInputModelSelectValue placeholder="Select model" />
                    </PromptInputModelSelectTrigger>
                    <PromptInputModelSelectContent>
                      <PromptInputModelSelectItem value="gpt-4">GPT-4</PromptInputModelSelectItem>
                      <PromptInputModelSelectItem value="gpt-4-turbo">GPT-4 Turbo</PromptInputModelSelectItem>
                      <PromptInputModelSelectItem value="gpt-3.5-turbo">GPT-3.5 Turbo</PromptInputModelSelectItem>
                    </PromptInputModelSelectContent>
                  </PromptInputModelSelect>
                </PromptInputTools>
                <PromptInputSubmit
                  disabled={!inputValue.trim() || isLoading}
                />
              </PromptInputToolbar>
            </PromptInput>
            <p className="text-sm text-muted-foreground">
              Press Cmd/Ctrl + Enter to send, or click a suggestion above
            </p>
          </div>
        </div>
      </main>
    </div>
  );
};

export default Homepage;